// This is the vendor.js file for external libraries that hardly ever change.
// alert("HI FROM VENDOR!");

// Now we are going to import Bootstrap with just import "bootstrap"; because we already installed Bootstrap up in node_modules.
// We are going to insert a Bootstrap Navbar into the template.html file.  This requires JavaScript when you shrink the page down.  We're going to use the CSS, which is located in the main.scss file, but not the JavaScript, at first.  It will show all of the options when the window size is large enough.  When you shrink the window size, it will collapse into the hamburger menu, but the hamburger menu won't slide down to show the navigation options.  So if we don't have JavaScript, it won't work properly.
// When we run npm start with import "bootstrap"; commented out, the webpack-dev-server will start and we won't get any errors.  When we uncomment import "bootstrap"; and save, we will now get errors saying that the jquery and popper.js modules are not found, and the app failed to compile.  You can actually run npm start with import "bootstrap"; uncommented and the webpack-dev-server will still start and serve you the app, but the hamburger menu will not work properly, and you will get errors in the Terminal.  We will install jQuery and Popper.js to eliminate these errors and to get the Navbar hamburger menu working properly.  After doing this, we will not get any errors and the app will compile successfully when we save.  On the Bootstrap docs it makes it very clear that you will need jQuery and Popper.js in order to use Bootstrap.  Colt did not include these two things right away because we were only using the CSS, which doesn't depend on these.
// When we run npm run build with jQuery and Popper.js included, the vendor.someHashInTheMiddle.js file that is created will have all of the Bootstrap JavaScript included.  It will have things like jQuery and Popper.js, which it depends on.  It will have all of the dependencies included.  It is minified.
// Our app code is in the main.someHashInTheMiddle.js file and it is being minified, too.  It includes Bootstrap CSS.  We will work on extracting CSS out into its own file later, but for now it's all happening in main.someHashInTheMiddle.js.
import "bootstrap";

// We just split up our code.  We imported Bootstrap into vendor.js.  You could follow this pattern with whatever other libraries you are using.  Aside from Bootstrap, there are other JavaScript libraries that you want.  You can put them in vendor.js and they will be bundled together into their own file.  It will always be that same content hash unless those libraries change, or unless you add something new inside the vendor.js file, or change the code.  This allows the browser to cache the vendor.someHashInTheMiddle.js file separately, which is less likely to change, and then your main.js file can change more often.
